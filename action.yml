name: "SAFE Network Testnet Workflow Action"
description: "GitHub action to use the sn_testnet_tool repository to deploy a testnet"
inputs:
  action:
    description: "Task to be carried out. Accepts 'create', 'destroy', 'resources' or 'logs'"
    default: "create"
  ansible-vault-password:
    description: Password for Ansible vault.
    required: true
  aws-access-key-id:
    description: "AWS access key ID"
  aws-access-key-secret:
    description: "AWS access key"
  aws-region:
    description: "AWS region"
  custom-node-bin-org-name:
    description: >
      If using a custom node binary, set this to the name of the org or username of the repository.
      The repository will be cloned and the binary will be built.
  custom-node-bin-branch-name:
    description: >
      If using a custom node binary, set this to the branch on the repository you want to use.
      The repository will be cloned and the binary will be built using this branch.
  do-token:
    description: "Digital Ocean Authorization token"
  name:
    description: "The name of the testnet"
    required: true
  node-count:
    description: "Number of nodes service instances to be started"
  provider:
    description: "The cloud provider. Valid values are 'aws' or 'digital-ocean'."
    required: true
  rust-log:
    description: "Set RUST_LOG to this value for sn-testnet-deploy"
    required: false
  ssh-secret-key:
    description: "SSH key used to run the nodes on the Digital Ocean droplets"
  subnet-id:
    description: If running on AWS, this is the subnet of the VPC on which the VMs will be created.
  security-group-id:
    description: If running on AWS, this is the ID of the security groups the VMs will use.
  testnet-name:
    description: The name of the testnet.
    required: true
  testnet-tool-repo-branch:
    description: >
      The branch for the testnet tool repository. This is to enable using forks to test changes to
      the testnet tool. Will default to the `digital-ocean-refactor` branch.
    default: "main"
  testnet-tool-repo-user:
    description: >
      The user or organisation for the testnet tool repository. This is to enable using forks to
      test changes to the testnet tool. Will default to the `jacderida`.
    default: "maidsafe"
  vm-count:
    description: "Number of node VMs to be deployed"

runs:
  using: "composite"
  steps:
    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    - name: Install tools
      if: inputs.action == 'create'
      shell: bash
      run: |
        sudo apt-get update -y
        # There is some issue with the latest version of Ansible not correctly
        # reading the Digital Ocean token from environment variables, so just
        # pin to this version for now.
        pip install --user ansible==8.2.0
        pip install --user boto3
        sudo apt-get install jq -y

    - name: Install tools
      if: inputs.action == 'logs'
      shell: bash
      run: |
        sudo apt-get update -y
        sudo apt-get install rsync -y

    - name: Clone the deployer and setup prerequisite files
      shell: bash
      env:
        DO_PAT: ${{ inputs.do-token }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-access-key-secret }}
        AWS_DEFAULT_REGION: ${{ inputs.aws-region }}
        CUSTOM_BIN_ORG_NAME: ${{ inputs.custom-node-bin-org-name }}
        CUSTOM_BIN_BRANCH_NAME: ${{ inputs.custom-node-bin-branch-name }}
        NODE_COUNT: ${{ inputs.node-count }}
        PROVIDER: ${{ inputs.provider }}
        RUST_LOG: ${{ inputs.rust-log }}
        SN_TESTNET_DEV_SUBNET_ID: ${{ inputs.subnet-id }}
        SN_TESTNET_DEV_SECURITY_GROUP_ID: ${{ inputs.security-group-id }}
        TESTNET_NAME: ${{ inputs.testnet-name }}
        TESTNET_TOOL_BRANCH: ${{ inputs.testnet-tool-repo-branch }}
        TESTNET_TOOL_USER: ${{ inputs.testnet-tool-repo-user }}
        TERRAFORM_STATE_BUCKET_NAME: maidsafe-org-infra-tfstate
        VM_COUNT: ${{ inputs.vm-count }}
      run: |
        set -e

        # This action might be called from inside another repo (after checking out). Thus we should clone the deployer
        # inside home.
        cd ~
        echo "ORIGINAL_DIR=$(pwd)" >> $GITHUB_ENV

        if [ ! -d "sn-testnet-deploy" ]; then
          git clone --quiet --single-branch --depth 1 \
            --branch $TESTNET_TOOL_BRANCH https://github.com/$TESTNET_TOOL_USER/sn-testnet-deploy
        fi

        if [ ! -f ~/.ssh/id_rsa ]; then
          mkdir ~/.ssh
          echo "${{ inputs.ssh-secret-key }}" >> ~/.ssh/id_rsa
          chmod 0400 ~/.ssh/id_rsa
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
        fi

        if [ ! -f ~/.ansible/vault-password ]; then
          mkdir ~/.ansible
          echo "${{ inputs.ansible-vault-password }}" >> ~/.ansible/vault-password
        fi

        # .env file should be present inside the deployer 
        cd sn-testnet-deploy
        if [ ! -f ".env" ]; then
          echo "ANSIBLE_VAULT_PASSWORD_PATH=/home/runner/.ansible/vault-password" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_DEFAULT_REGION=${{ env.AWS_DEFAULT_REGION }}" >> .env
          echo "DO_PAT=${{ env.DO_PAT }}" >> .env
          echo "SSH_KEY_PATH=/home/runner/.ssh/id_rsa" >> .env
          echo "SN_TESTNET_DEV_SUBNET_ID=${{ env.SN_TESTNET_DEV_SUBNET_ID }}" >> .env
          echo "SN_TESTNET_DEV_SECURITY_GROUP_ID=${{ env.SN_TESTNET_DEV_SECURITY_GROUP_ID }}" >> .env
          echo "TERRAFORM_STATE_BUCKET_NAME=${{ env.TERRAFORM_STATE_BUCKET_NAME }}" >> .env
        fi

        export PATH=$PATH:/home/runner/.local/bin

    - name: Create testnet
      if: inputs.action == 'create'
      env:
        CUSTOM_BIN_ORG_NAME: ${{ inputs.custom-node-bin-org-name }}
        CUSTOM_BIN_BRANCH_NAME: ${{ inputs.custom-node-bin-branch-name }}
        NODE_COUNT: ${{ inputs.node-count }}
        PROVIDER: ${{ inputs.provider }}
        RUST_LOG: ${{ inputs.rust-log }}
        TESTNET_NAME: ${{ inputs.testnet-name }}
        VM_COUNT: ${{ inputs.vm-count }}
      shell: bash
      run: |
        set -e

        if { [ -z "$CUSTOM_BIN_ORG_NAME" ] && [ -n "$CUSTOM_BIN_BRANCH_NAME" ]; } || 
           { [ -n "$CUSTOM_BIN_ORG_NAME" ] && [ -z "$CUSTOM_BIN_BRANCH_NAME" ]; }; then
          echo "Both CUSTOM_BIN_ORG_NAME and CUSTOM_BIN_BRANCH_NAME must be set if either are used."
          exit 1
        fi

        cd ~/sn-testnet-deploy
        if [[ -n $CUSTOM_BIN_ORG_NAME ]]; then
          cargo run -- deploy \
            --name "$TESTNET_NAME" \
            --provider "$PROVIDER" \
            --vm-count $VM_COUNT \
            --node-count $NODE_COUNT \
            --repo-owner $CUSTOM_BIN_ORG_NAME \
            --branch $CUSTOM_BIN_BRANCH_NAME
        else
          cargo run -- deploy \
            --name "$TESTNET_NAME" \
            --provider "$PROVIDER" \
            --vm-count $VM_COUNT \
            --node-count $NODE_COUNT
        fi

    - name: Upload the inventory file
      if: inputs.action == 'create'
      uses: actions/upload-artifact@main
      with:
        name: deploy-inventory
        path: /home/runner/.local/share/safe/testnet-deploy

    - name: Set SAFE_PEERS (Linux)
      if: inputs.action == 'create'
      shell: bash
      run: |
        inventory_path=/home/runner/.local/share/safe/testnet-deploy/"${{ inputs.testnet-name }}"-inventory.json
        echo "Inventory Path: $inventory_path"
        genesis_multiaddr=$(jq -r '.genesis_multiaddr' $inventory_path)
        echo "SAFE_PEERS=$genesis_multiaddr" >> $GITHUB_ENV

    - name: Destroy testnet
      if: inputs.action == 'destroy'
      env:
        PROVIDER: ${{ inputs.provider }}
        RUST_LOG: ${{ inputs.rust-log }}
        TESTNET_NAME: ${{ inputs.testnet-name }}
      shell: bash
      run: |
        set -e
        cd ~/sn-testnet-deploy
        cargo run -- clean --name "$TESTNET_NAME" --provider "$PROVIDER"

    - name: Get resources
      if: inputs.action == 'resources'
      env:
        PROVIDER: ${{ inputs.provider }}
        RUST_LOG: ${{ inputs.rust-log }}
        TESTNET_NAME: ${{ inputs.testnet-name }}
      shell: bash
      run: |
        set -e
        cd ~/sn-testnet-deploy
        cargo run -- logs copy --name "$TESTNET_NAME" --provider "$PROVIDER" --resources-only
      
    - name: Upload the resources
      if: inputs.action == 'resources'
      uses: actions/upload-artifact@main
      with:
        name: testnet_resources
        path: sn-testnet-deploy/logs/${{ inputs.testnet-name }}

    - name: Rsync logs
      if: inputs.action == 'logs'
      env:
        PROVIDER: ${{ inputs.provider }}
        RUST_LOG: ${{ inputs.rust-log }}
        TESTNET_NAME: ${{ inputs.testnet-name }}
      shell: bash
      run: |
        set -e
        cd ~/sn-testnet-deploy
        cargo run -- logs rsync --name "$TESTNET_NAME" --provider "$PROVIDER"
      
    - name: Upload the logs
      if: inputs.action == 'logs'
      uses: actions/upload-artifact@main
      with:
        name: testnet_logs
        path: sn-testnet-deploy/logs/${{ inputs.testnet-name }}

    # We don't want the action to change dirs on it's own
    - name: Change PWD back to the original DIR
      shell: bash
      run: |
        cd "$ORIGINAL_DIR"

branding:
  icon: "globe"
  color: "blue"
